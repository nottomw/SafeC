Parsing file: 'AST_looping.sc'...


Parsing done, characters count 1463

AST:
[0] TranslationUnit
	[1] Function (void TEST_LOOP_FOR ( )) { 0 -- 135 }
		[2] Scope { 46 -- 135 }
			[3] BinaryOp '=' { 46 -- 61 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop for { 61 -- 133 }
				[4] Group { 89 -- 90 }
					[5] BinaryOp '=' { 69 -- 77 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '0' { 0 -- 0 }
					[5] BinaryOp '<' { 77 -- 85 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '10' { 0 -- 0 }
					[5] PostfixExpression '++' { 85 -- 89 }
						[6] Identifier 'i' { 0 -- 0 }
				[4] Scope { 90 -- 133 }
					[5] PostfixExpression '(...)' { 96 -- 127 }
						[6] Identifier 'printf' { 0 -- 0 }
							[7] Constant '"i = %d\n"' { 0 -- 0 }
							[7] Identifier 'i' { 0 -- 0 }
	[1] Function (void TEST_LOOP_FOR_BREAK ( )) { 135 -- 317 }
		[2] Scope { 169 -- 317 }
			[3] BinaryOp '=' { 169 -- 184 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop for { 184 -- 315 }
				[4] Group { 212 -- 213 }
					[5] BinaryOp '=' { 192 -- 200 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '0' { 0 -- 0 }
					[5] BinaryOp '<' { 200 -- 208 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '10' { 0 -- 0 }
					[5] PostfixExpression '++' { 208 -- 212 }
						[6] Identifier 'i' { 0 -- 0 }
				[4] Scope { 213 -- 315 }
					[5] PostfixExpression '(...)' { 219 -- 250 }
						[6] Identifier 'printf' { 0 -- 0 }
							[7] Constant '"i = %d\n"' { 0 -- 0 }
							[7] Identifier 'i' { 0 -- 0 }
					[5] If { 250 -- 309 }
						[6] Group { 250 -- 270 }
							[7] BinaryOp '==' { 261 -- 270 }
								[8] Identifier 'i' { 0 -- 0 }
								[8] Constant '5' { 0 -- 0 }
						[6] Scope { 270 -- 309 }
							[7] JumpStatement 'break' { 280 -- 299 }
	[1] Function (void TEST_LOOP_FOR_RETURN ( )) { 317 -- 501 }
		[2] Scope { 352 -- 501 }
			[3] BinaryOp '=' { 352 -- 367 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop for { 367 -- 499 }
				[4] Group { 395 -- 396 }
					[5] BinaryOp '=' { 375 -- 383 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '0' { 0 -- 0 }
					[5] BinaryOp '<' { 383 -- 391 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '10' { 0 -- 0 }
					[5] PostfixExpression '++' { 391 -- 395 }
						[6] Identifier 'i' { 0 -- 0 }
				[4] Scope { 396 -- 499 }
					[5] PostfixExpression '(...)' { 402 -- 433 }
						[6] Identifier 'printf' { 0 -- 0 }
							[7] Constant '"i = %d\n"' { 0 -- 0 }
							[7] Identifier 'i' { 0 -- 0 }
					[5] If { 433 -- 493 }
						[6] Group { 433 -- 453 }
							[7] BinaryOp '==' { 444 -- 453 }
								[8] Identifier 'i' { 0 -- 0 }
								[8] Constant '5' { 0 -- 0 }
						[6] Scope { 453 -- 493 }
							[7] Return 'empty' { 463 -- 483 }
	[1] Function (void TEST_LOOP_FOR_CONTINUE ( )) { 501 -- 690 }
		[2] Scope { 538 -- 690 }
			[3] BinaryOp '=' { 538 -- 553 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop for { 553 -- 688 }
				[4] Group { 581 -- 582 }
					[5] BinaryOp '=' { 561 -- 569 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '0' { 0 -- 0 }
					[5] BinaryOp '<' { 569 -- 577 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '10' { 0 -- 0 }
					[5] PostfixExpression '++' { 577 -- 581 }
						[6] Identifier 'i' { 0 -- 0 }
				[4] Scope { 582 -- 688 }
					[5] If { 588 -- 650 }
						[6] Group { 588 -- 608 }
							[7] BinaryOp '==' { 599 -- 608 }
								[8] Identifier 'i' { 0 -- 0 }
								[8] Constant '5' { 0 -- 0 }
						[6] Scope { 608 -- 650 }
							[7] JumpStatement 'continue' { 618 -- 640 }
					[5] PostfixExpression '(...)' { 650 -- 682 }
						[6] Identifier 'printf' { 0 -- 0 }
							[7] Constant '"i = %d\n"' { 0 -- 0 }
							[7] Identifier 'i' { 0 -- 0 }
	[1] Function (void TEST_LOOP_WHILE ( )) { 690 -- 783 }
		[2] Scope { 720 -- 783 }
			[3] BinaryOp '=' { 720 -- 735 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop while { 735 -- 781 }
				[4] Group { 0 -- 0 }
					[5] BinaryOp '<' { 745 -- 753 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '5' { 0 -- 0 }
				[4] Scope { 753 -- 781 }
					[5] BinaryOp '+=' { 759 -- 775 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '1' { 0 -- 0 }
	[1] Function (void TEST_LOOP_WHILE_BREAK ( )) { 783 -- 941 }
		[2] Scope { 819 -- 941 }
			[3] BinaryOp '=' { 819 -- 834 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop while { 834 -- 939 }
				[4] Group { 0 -- 0 }
					[5] BinaryOp '<' { 844 -- 852 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '5' { 0 -- 0 }
				[4] Scope { 852 -- 939 }
					[5] BinaryOp '+=' { 858 -- 874 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '1' { 0 -- 0 }
					[5] If { 874 -- 933 }
						[6] Group { 874 -- 894 }
							[7] BinaryOp '==' { 885 -- 894 }
								[8] Identifier 'i' { 0 -- 0 }
								[8] Constant '2' { 0 -- 0 }
						[6] Scope { 894 -- 933 }
							[7] JumpStatement 'break' { 904 -- 923 }
	[1] Function (void TEST_LOOP_WHILE_RETURN ( )) { 941 -- 1101 }
		[2] Scope { 978 -- 1101 }
			[3] BinaryOp '=' { 978 -- 993 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop while { 993 -- 1099 }
				[4] Group { 0 -- 0 }
					[5] BinaryOp '<' { 1003 -- 1011 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '5' { 0 -- 0 }
				[4] Scope { 1011 -- 1099 }
					[5] BinaryOp '+=' { 1017 -- 1033 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '1' { 0 -- 0 }
					[5] If { 1033 -- 1093 }
						[6] Group { 1033 -- 1053 }
							[7] BinaryOp '==' { 1044 -- 1053 }
								[8] Identifier 'i' { 0 -- 0 }
								[8] Constant '3' { 0 -- 0 }
						[6] Scope { 1053 -- 1093 }
							[7] Return 'empty' { 1063 -- 1083 }
	[1] Function (void TEST_LOOP_WHILE_CONTINUE ( )) { 1101 -- 1296 }
		[2] Scope { 1140 -- 1296 }
			[3] BinaryOp '=' { 1140 -- 1155 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop while { 1155 -- 1294 }
				[4] Group { 0 -- 0 }
					[5] BinaryOp '<' { 1165 -- 1173 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '5' { 0 -- 0 }
				[4] Scope { 1173 -- 1294 }
					[5] BinaryOp '+=' { 1179 -- 1195 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '1' { 0 -- 0 }
					[5] If { 1195 -- 1257 }
						[6] Group { 1195 -- 1215 }
							[7] BinaryOp '==' { 1206 -- 1215 }
								[8] Identifier 'i' { 0 -- 0 }
								[8] Constant '4' { 0 -- 0 }
						[6] Scope { 1215 -- 1257 }
							[7] JumpStatement 'continue' { 1225 -- 1247 }
					[5] PostfixExpression '(...)' { 1257 -- 1288 }
						[6] Identifier 'printf' { 0 -- 0 }
							[7] Constant '"i = %d\n"' { 0 -- 0 }
							[7] Identifier 'i' { 0 -- 0 }
	[1] Function (void TEST_LOOP_NO_SCOPE ( )) { 1296 -- 1462 }
		[2] Scope { 1329 -- 1462 }
			[3] BinaryOp '=' { 1329 -- 1346 }
				[4] Declaration 'int i' { 0 -- 0 }
				[4] Constant '666' { 0 -- 0 }
			[3] Loop for { 1346 -- 1401 }
				[4] Group { 1374 -- 1374 }
					[5] BinaryOp '=' { 1354 -- 1362 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '0' { 0 -- 0 }
					[5] BinaryOp '<' { 1362 -- 1369 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '5' { 0 -- 0 }
					[5] UnaryOp '++' { 1369 -- 1374 }
						[6] Identifier 'i' { 0 -- 0 }
				[4] PostfixExpression '(...)' { 1374 -- 1401 }
					[5] Identifier 'printf' { 0 -- 0 }
						[6] Constant '"%d\n"' { 0 -- 0 }
						[6] Identifier 'i' { 0 -- 0 }
			[3] BinaryOp '=' { 1401 -- 1413 }
				[4] Identifier 'i' { 0 -- 0 }
				[4] Constant '0' { 0 -- 0 }
			[3] Loop while { 1413 -- 1460 }
				[4] Group { 0 -- 0 }
					[5] BinaryOp '<' { 1423 -- 1431 }
						[6] Identifier 'i' { 0 -- 0 }
						[6] Constant '5' { 0 -- 0 }
				[4] PostfixExpression '(...)' { 1458 -- 1460 }
					[5] Identifier 'printf' { 0 -- 0 }
						[6] Constant '"%d\n"' { 0 -- 0 }
						[6] PostfixExpression '++' { 1431 -- 1458 }
							[7] Identifier 'i' { 0 -- 0 }


