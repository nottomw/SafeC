Parsing file: 'AST_defer.sc'...
Parsing done, characters count 3068

Current AST:
[0] TranslationUnit
	[1] Function (void DEFER_FUNCTION_SCOPE ( )) { 53 -- 163 }
		[2] PostfixExpression '(...)' { 86 }
			[3] Identifier 'printf' { 65 }
				[4] Constant '"function scope 1\n"' { 85 }
		[2] Defer { 127 }
			[3] PostfixExpression '(...)' { 126 }
				[4] Identifier 'printf' { 104 }
					[5] Constant '"function scope 3\n"' { 125 }
		[2] PostfixExpression '(...)' { 160 }
			[3] Identifier 'printf' { 139 }
				[4] Constant '"function scope 2\n"' { 159 }
	[1] Function (void DEFER_SIMPLE_SCOPE_ONLY ( )) { 201 -- 308 }
		[2] Scope { 222, 306 }
			[3] PostfixExpression '(...)' { 235 }
				[4] Identifier 'printf' { 223 }
					[5] Constant '"scope 1\n"' { 234 }
			[3] Defer { 271 }
				[4] PostfixExpression '(...)' { 270 }
					[5] Identifier 'printf' { 257 }
						[6] Constant '"scope 3\n"' { 269 }
			[3] PostfixExpression '(...)' { 299 }
				[4] Identifier 'printf' { 287 }
					[5] Constant '"scope 2\n"' { 298 }
	[1] Function (void DEFER_SIMPLE_SCOPE ( )) { 341 -- 524 }
		[2] PostfixExpression '(...)' { 378 }
			[3] Identifier 'printf' { 353 }
				[4] Constant '"function scope start\n"' { 377 }
		[2] Scope { 401, 485 }
			[3] PostfixExpression '(...)' { 414 }
				[4] Identifier 'printf' { 402 }
					[5] Constant '"scope 1\n"' { 413 }
			[3] Defer { 450 }
				[4] PostfixExpression '(...)' { 449 }
					[5] Identifier 'printf' { 436 }
						[6] Constant '"scope 3\n"' { 448 }
			[3] PostfixExpression '(...)' { 478 }
				[4] Identifier 'printf' { 466 }
					[5] Constant '"scope 2\n"' { 477 }
		[2] PostfixExpression '(...)' { 521 }
			[3] Identifier 'printf' { 498 }
				[4] Constant '"function scope end\n"' { 520 }
	[1] Function (void DEFER_CONDITION (int someParam,  )) { 563 -- 730 }
		[2] PostfixExpression '(...)' { 589 }
			[3] Identifier 'printf' { 575 }
				[4] Constant '"fun start\n"' { 588 }
		[2] If { 615 -- 702 }
			[3] Group
				[4] BinaryOp '==' { 615 }
					[5] Identifier 'someParam' { 609 }
					[5] Constant '5' { 614 }
			[3] PostfixExpression '(...)' { 643 }
				[4] Identifier 'printf' { 637 }
					[5] Constant '"1\n"' { 642 }
			[3] Defer { 673 }
				[4] PostfixExpression '(...)' { 672 }
					[5] Identifier 'printf' { 665 }
						[6] Constant '"3\n"' { 671 }
			[3] PostfixExpression '(...)' { 695 }
				[4] Identifier 'printf' { 689 }
					[5] Constant '"2\n"' { 694 }
		[2] PostfixExpression '(...)' { 727 }
			[3] Identifier 'printf' { 715 }
				[4] Constant '"fun end\n"' { 726 }
	[1] Function (void DEFER_CONDITION_MULTIPLE (int someParam,  )) { 778 -- 979 }
		[2] Defer { 804 }
			[3] PostfixExpression '(...)' { 803 }
				[4] Identifier 'printf' { 795 }
					[5] Constant '"last"' { 802 }
		[2] If { 829 -- 977 }
			[3] Group
				[4] BinaryOp '>' { 829 }
					[5] Identifier 'someParam' { 823 }
					[5] Constant '10' { 828 }
			[3] Defer { 864 }
				[4] PostfixExpression '(...)' { 863 }
					[5] Identifier 'printf' { 856 }
						[6] Constant '"2\n"' { 862 }
			[3] If { 891 -- 971 }
				[4] Group
					[5] BinaryOp '<' { 891 }
						[6] Identifier 'someParam' { 886 }
						[6] Constant '5' { 890 }
				[4] Defer { 934 }
					[5] PostfixExpression '(...)' { 933 }
						[6] Identifier 'printf' { 926 }
							[7] Constant '"2\n"' { 932 }
				[4] PostfixExpression '(...)' { 960 }
					[5] Identifier 'printf' { 954 }
						[6] Constant '"1\n"' { 959 }
	[1] Function (void DEFER_LOOP ( )) { 1004 -- 1218 }
		[2] BinaryOp '=' { 1016 }
			[3] Declaration 'int i' { 1014 }
			[3] Constant '0' { 1018 }
		[2] Loop for { 1027 -- 1110 }
			[3] Group
				[4] BinaryOp '=' { 1031 }
					[5] Identifier 'i' { 1029 }
					[5] Constant '0' { 1033 }
				[4] BinaryOp '<' { 1041 }
					[5] Identifier 'i' { 1036 }
					[5] Constant '5' { 1040 }
				[4] PostfixExpression '++' { 1045 }
					[5] Identifier 'i' { 1043 }
			[3] Defer { 1081 }
				[4] PostfixExpression '(...)' { 1080 }
					[5] Identifier 'printf' { 1073 }
						[6] Constant '"2\n"' { 1079 }
			[3] PostfixExpression '(...)' { 1103 }
				[4] Identifier 'printf' { 1097 }
					[5] Constant '"1\n"' { 1102 }
		[2] BinaryOp '=' { 1119 }
			[3] Identifier 'i' { 1119 }
			[3] Constant '0' { 1121 }
		[2] Loop while { 1132 -- 1216 }
			[3] Group
				[4] BinaryOp '<' { 1139 }
					[5] Identifier 'i' { 1134 }
					[5] Constant '5' { 1138 }
			[3] Defer { 1174 }
				[4] PostfixExpression '(...)' { 1173 }
					[5] Identifier 'printf' { 1166 }
						[6] Constant '"2\n"' { 1172 }
			[3] PostfixExpression '(...)' { 1196 }
				[4] Identifier 'printf' { 1190 }
					[5] Constant '"1\n"' { 1195 }
			[3] PostfixExpression '++' { 1209 }
				[4] Identifier 'i' { 1209 }
	[1] Function (void DEFER_LOOP_BREAK (int param,  )) { 1254 -- 1598 }
		[2] BinaryOp '=' { 1266 }
			[3] Declaration 'int i' { 1264 }
			[3] Constant '0' { 1268 }
		[2] Loop for { 1277 -- 1425 }
			[3] Group
				[4] BinaryOp '=' { 1281 }
					[5] Identifier 'i' { 1279 }
					[5] Constant '0' { 1283 }
				[4] BinaryOp '<' { 1291 }
					[5] Identifier 'i' { 1286 }
					[5] Constant '5' { 1290 }
				[4] PostfixExpression '++' { 1295 }
					[5] Identifier 'i' { 1293 }
			[3] Defer { 1331 }
				[4] PostfixExpression '(...)' { 1330 }
					[5] Identifier 'printf' { 1323 }
						[6] Constant '"2\n"' { 1329 }
			[3] If { 1356 -- 1395 }
				[4] Group
					[5] BinaryOp '==' { 1356 }
						[6] Identifier 'i' { 1346 }
						[6] Identifier 'param' { 1355 }
				[4] JumpStatement 'break' { 1385 }
			[3] PostfixExpression '(...)' { 1418 }
				[4] Identifier 'printf' { 1412 }
					[5] Constant '"1\n"' { 1417 }
		[2] BinaryOp '=' { 1434 }
			[3] Identifier 'i' { 1434 }
			[3] Constant '0' { 1436 }
		[2] Loop while { 1447 -- 1596 }
			[3] Group
				[4] BinaryOp '<' { 1454 }
					[5] Identifier 'i' { 1449 }
					[5] Constant '5' { 1453 }
			[3] Defer { 1489 }
				[4] PostfixExpression '(...)' { 1488 }
					[5] Identifier 'printf' { 1481 }
						[6] Constant '"2\n"' { 1487 }
			[3] If { 1514 -- 1553 }
				[4] Group
					[5] BinaryOp '==' { 1514 }
						[6] Identifier 'i' { 1504 }
						[6] Identifier 'param' { 1513 }
				[4] JumpStatement 'break' { 1543 }
			[3] PostfixExpression '(...)' { 1576 }
				[4] Identifier 'printf' { 1570 }
					[5] Constant '"1\n"' { 1575 }
			[3] PostfixExpression '++' { 1589 }
				[4] Identifier 'i' { 1589 }
	[1] Function (void DEFER_LOOP_CONTINUE (int param,  )) { 1637 -- 1988 }
		[2] BinaryOp '=' { 1649 }
			[3] Declaration 'int i' { 1647 }
			[3] Constant '0' { 1651 }
		[2] Loop for { 1660 -- 1811 }
			[3] Group
				[4] BinaryOp '=' { 1664 }
					[5] Identifier 'i' { 1662 }
					[5] Constant '0' { 1666 }
				[4] BinaryOp '<' { 1674 }
					[5] Identifier 'i' { 1669 }
					[5] Constant '5' { 1673 }
				[4] PostfixExpression '++' { 1678 }
					[5] Identifier 'i' { 1676 }
			[3] Defer { 1714 }
				[4] PostfixExpression '(...)' { 1713 }
					[5] Identifier 'printf' { 1706 }
						[6] Constant '"2\n"' { 1712 }
			[3] If { 1739 -- 1781 }
				[4] Group
					[5] BinaryOp '==' { 1739 }
						[6] Identifier 'i' { 1729 }
						[6] Identifier 'param' { 1738 }
				[4] JumpStatement 'continue' { 1771 }
			[3] PostfixExpression '(...)' { 1804 }
				[4] Identifier 'printf' { 1798 }
					[5] Constant '"1\n"' { 1803 }
		[2] BinaryOp '=' { 1820 }
			[3] Identifier 'i' { 1820 }
			[3] Constant '0' { 1822 }
		[2] Loop while { 1833 -- 1985 }
			[3] Group
				[4] BinaryOp '<' { 1840 }
					[5] Identifier 'i' { 1835 }
					[5] Constant '5' { 1839 }
			[3] Defer { 1875 }
				[4] PostfixExpression '(...)' { 1874 }
					[5] Identifier 'printf' { 1867 }
						[6] Constant '"2\n"' { 1873 }
			[3] If { 1900 -- 1942 }
				[4] Group
					[5] BinaryOp '==' { 1900 }
						[6] Identifier 'i' { 1890 }
						[6] Identifier 'param' { 1899 }
				[4] JumpStatement 'continue' { 1932 }
			[3] PostfixExpression '(...)' { 1965 }
				[4] Identifier 'printf' { 1959 }
					[5] Constant '"1\n"' { 1964 }
			[3] PostfixExpression '++' { 1978 }
				[4] Identifier 'i' { 1978 }
	[1] Function (void DEFER_MULTIPLE ( )) { 2017 -- 2094 }
		[2] Defer { 2042 }
			[3] PostfixExpression '(...)' { 2041 }
				[4] Identifier 'printf' { 2034 }
					[5] Constant '"3\n"' { 2040 }
		[2] Defer { 2067 }
			[3] PostfixExpression '(...)' { 2066 }
				[4] Identifier 'printf' { 2059 }
					[5] Constant '"2\n"' { 2065 }
		[2] Defer { 2092 }
			[3] PostfixExpression '(...)' { 2091 }
				[4] Identifier 'printf' { 2084 }
					[5] Constant '"1\n"' { 2090 }
	[1] Function (void DEFER_SWITCH_CASE (int param,  )) { 2131 -- 2379 }
		[2] Defer { 2159 }
			[3] PostfixExpression '(...)' { 2158 }
				[4] Identifier 'printf' { 2148 }
					[5] Constant '"last\n"' { 2157 }
		[2] SwitchCase on 'Identifier' { 2171 -- 2377 }
			[3] Identifier 'param' { 2177 }
			[3] SwitchCaseLabel on 'Constant' { 2200 -- 2227 }
				[4] Constant '0' { 2199 }
				[4] PostfixExpression '(...)' { 2226 }
					[5] Identifier 'printf' { 2220 }
						[6] Constant '"0\n"' { 2225 }
			[3] JumpStatement 'break' { 2242 }
			[3] SwitchCaseLabel on 'Constant' { 2259 -- 2286 }
				[4] Constant '1' { 2258 }
				[4] PostfixExpression '(...)' { 2285 }
					[5] Identifier 'printf' { 2279 }
						[6] Constant '"0\n"' { 2284 }
			[3] JumpStatement 'break' { 2301 }
			[3] SwitchCaseLabel on 'default' { 2319 -- 2352 }
				[4] EmptyStatement
				[4] PostfixExpression '(...)' { 2351 }
					[5] Identifier 'printf' { 2339 }
						[6] Constant '"default\n"' { 2350 }
			[3] JumpStatement 'break' { 2371 }
	[1] Function (void DEFER_STRANGE ( )) { 2407 -- 2636 }
		[2] BinaryOp '=' { 2419 }
			[3] Declaration 'int i' { 2417 }
			[3] Constant '0' { 2421 }
		[2] Loop for { 2464 -- 2516 }
			[3] Group
				[4] BinaryOp '=' { 2468 }
					[5] Identifier 'i' { 2466 }
					[5] Constant '0' { 2470 }
				[4] BinaryOp '<' { 2478 }
					[5] Identifier 'i' { 2473 }
					[5] Constant '5' { 2477 }
				[4] PostfixExpression '++' { 2482 }
					[5] Identifier 'i' { 2480 }
			[3] Defer { 2516 }
				[4] PostfixExpression '(...)' { 2515 }
					[5] Identifier 'printf' { 2504 }
						[6] Constant '"%d\n"' { 2511 }
						[6] Identifier 'i' { 2514 }
		[2] If { 2533 -- 2583 }
			[3] Group
				[4] BinaryOp '==' { 2533 }
					[5] Identifier 'i' { 2527 }
					[5] Constant '0' { 2532 }
			[3] Defer { 2583 }
				[4] PostfixExpression '(...)' { 2582 }
					[5] Identifier 'printf' { 2554 }
						[6] Constant '"deferred print in cond\n"' { 2581 }
		[2] Defer { 2634 }
			[3] PostfixExpression '(...)' { 2633 }
				[4] Identifier 'printf' { 2601 }
					[5] Constant '"last statement in function\n"' { 2632 }
	[1] Function (void DEFER_WITH_COMPL_STATEMENTS ( )) { 2678 -- 3019 }
		[2] BinaryOp '=' { 2696 }
			[3] Declaration 'int counter' { 2694 }
			[3] Constant '0' { 2698 }
		[2] BinaryOp '=' { 2723 }
			[3] Declaration 'int counterSecond' { 2721 }
			[3] Constant '5' { 2725 }
		[2] PostfixExpression '(...)' { 2753 }
			[3] Identifier 'printf' { 2739 }
				[4] Constant '"fun start\n"' { 2752 }
		[2] Scope { 2775, 2837 }
			[3] Defer { 2789 }
				[4] BinaryOp '+=' { 2786 }
					[5] Identifier 'counter' { 2783 }
					[5] Constant '1' { 2788 }
			[3] PostfixExpression '(...)' { 2830 }
				[4] Identifier 'printf' { 2805 }
					[5] Constant '"counter: %d\n"' { 2820 }
					[5] Identifier 'counter' { 2829 }
		[2] PostfixExpression '(...)' { 2874 }
			[3] Identifier 'printf' { 2849 }
				[4] Constant '"counter: %d\n"' { 2864 }
				[4] Identifier 'counter' { 2873 }
		[2] Scope { 2896, 2979 }
			[3] Defer { 2931 }
				[4] BinaryOp '=' { 2906 }
					[5] Identifier 'counter' { 2904 }
					[5] BinaryOp '+' { 2931 }
						[6] Identifier 'counterSecond' { 2920 }
						[6] Identifier 'counter' { 2930 }
			[3] PostfixExpression '(...)' { 2972 }
				[4] Identifier 'printf' { 2947 }
					[5] Constant '"counter: %d\n"' { 2962 }
					[5] Identifier 'counter' { 2971 }
		[2] PostfixExpression '(...)' { 3016 }
			[3] Identifier 'printf' { 2991 }
				[4] Constant '"counter: %d\n"' { 3006 }
				[4] Identifier 'counter' { 3015 }


